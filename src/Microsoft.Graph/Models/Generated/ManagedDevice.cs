// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Managed Device.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class ManagedDevice : Entity
    {
    
        /// <summary>
        /// Gets or sets user id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userId", Required = Newtonsoft.Json.Required.Default)]
        public string UserId { get; set; }
    
        /// <summary>
        /// Gets or sets device name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceName", Required = Newtonsoft.Json.Required.Default)]
        public string DeviceName { get; set; }
    
        /// <summary>
        /// Gets or sets hardware information.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "hardwareInformation", Required = Newtonsoft.Json.Required.Default)]
        public HardwareInformation HardwareInformation { get; set; }
    
        /// <summary>
        /// Gets or sets owner type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "ownerType", Required = Newtonsoft.Json.Required.Default)]
        public OwnerType? OwnerType { get; set; }
    
        /// <summary>
        /// Gets or sets device action results.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceActionResults", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<DeviceActionResult> DeviceActionResults { get; set; }
    
        /// <summary>
        /// Gets or sets management state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "managementState", Required = Newtonsoft.Json.Required.Default)]
        public ManagementState? ManagementState { get; set; }
    
        /// <summary>
        /// Gets or sets enrolled date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enrolledDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? EnrolledDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets last sync date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastSyncDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastSyncDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets chassis type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "chassisType", Required = Newtonsoft.Json.Required.Default)]
        public ChassisType? ChassisType { get; set; }
    
        /// <summary>
        /// Gets or sets operating system.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "operatingSystem", Required = Newtonsoft.Json.Required.Default)]
        public string OperatingSystem { get; set; }
    
        /// <summary>
        /// Gets or sets device type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceType", Required = Newtonsoft.Json.Required.Default)]
        public DeviceType? DeviceType { get; set; }
    
        /// <summary>
        /// Gets or sets compliance state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "complianceState", Required = Newtonsoft.Json.Required.Default)]
        public ComplianceState? ComplianceState { get; set; }
    
        /// <summary>
        /// Gets or sets jail broken.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "jailBroken", Required = Newtonsoft.Json.Required.Default)]
        public string JailBroken { get; set; }
    
        /// <summary>
        /// Gets or sets management agent.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "managementAgent", Required = Newtonsoft.Json.Required.Default)]
        public ManagementAgentType? ManagementAgent { get; set; }
    
        /// <summary>
        /// Gets or sets os version.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "osVersion", Required = Newtonsoft.Json.Required.Default)]
        public string OsVersion { get; set; }
    
        /// <summary>
        /// Gets or sets eas activated.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "easActivated", Required = Newtonsoft.Json.Required.Default)]
        public bool? EasActivated { get; set; }
    
        /// <summary>
        /// Gets or sets eas device id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "easDeviceId", Required = Newtonsoft.Json.Required.Default)]
        public string EasDeviceId { get; set; }
    
        /// <summary>
        /// Gets or sets eas activation date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "easActivationDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? EasActivationDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets aad registered.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "aadRegistered", Required = Newtonsoft.Json.Required.Default)]
        public bool? AadRegistered { get; set; }
    
        /// <summary>
        /// Gets or sets enrollment type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enrollmentType", Required = Newtonsoft.Json.Required.Default)]
        public EnrollmentType? EnrollmentType { get; set; }
    
        /// <summary>
        /// Gets or sets lost mode state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lostModeState", Required = Newtonsoft.Json.Required.Default)]
        public LostModeState? LostModeState { get; set; }
    
        /// <summary>
        /// Gets or sets activation lock bypass code.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "activationLockBypassCode", Required = Newtonsoft.Json.Required.Default)]
        public string ActivationLockBypassCode { get; set; }
    
        /// <summary>
        /// Gets or sets email address.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "emailAddress", Required = Newtonsoft.Json.Required.Default)]
        public string EmailAddress { get; set; }
    
        /// <summary>
        /// Gets or sets azure active directory device id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "azureActiveDirectoryDeviceId", Required = Newtonsoft.Json.Required.Default)]
        public string AzureActiveDirectoryDeviceId { get; set; }
    
        /// <summary>
        /// Gets or sets device registration state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceRegistrationState", Required = Newtonsoft.Json.Required.Default)]
        public DeviceRegistrationState? DeviceRegistrationState { get; set; }
    
        /// <summary>
        /// Gets or sets device category display name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceCategoryDisplayName", Required = Newtonsoft.Json.Required.Default)]
        public string DeviceCategoryDisplayName { get; set; }
    
        /// <summary>
        /// Gets or sets is supervised.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isSupervised", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsSupervised { get; set; }
    
        /// <summary>
        /// Gets or sets exchange last successful sync date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeLastSuccessfulSyncDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? ExchangeLastSuccessfulSyncDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets exchange access state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeAccessState", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManagementExchangeAccessState? ExchangeAccessState { get; set; }
    
        /// <summary>
        /// Gets or sets exchange access state reason.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exchangeAccessStateReason", Required = Newtonsoft.Json.Required.Default)]
        public DeviceManagementExchangeAccessStateReason? ExchangeAccessStateReason { get; set; }
    
        /// <summary>
        /// Gets or sets remote assistance session url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "remoteAssistanceSessionUrl", Required = Newtonsoft.Json.Required.Default)]
        public string RemoteAssistanceSessionUrl { get; set; }
    
        /// <summary>
        /// Gets or sets is encrypted.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isEncrypted", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsEncrypted { get; set; }
    
        /// <summary>
        /// Gets or sets user principal name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "userPrincipalName", Required = Newtonsoft.Json.Required.Default)]
        public string UserPrincipalName { get; set; }
    
        /// <summary>
        /// Gets or sets model.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "model", Required = Newtonsoft.Json.Required.Default)]
        public string Model { get; set; }
    
        /// <summary>
        /// Gets or sets manufacturer.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "manufacturer", Required = Newtonsoft.Json.Required.Default)]
        public string Manufacturer { get; set; }
    
        /// <summary>
        /// Gets or sets imei.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "imei", Required = Newtonsoft.Json.Required.Default)]
        public string Imei { get; set; }
    
        /// <summary>
        /// Gets or sets compliance grace period expiration date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "complianceGracePeriodExpirationDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? ComplianceGracePeriodExpirationDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets serial number.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "serialNumber", Required = Newtonsoft.Json.Required.Default)]
        public string SerialNumber { get; set; }
    
        /// <summary>
        /// Gets or sets device configuration states.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceConfigurationStates", Required = Newtonsoft.Json.Required.Default)]
        public IManagedDeviceDeviceConfigurationStatesCollectionPage DeviceConfigurationStates { get; set; }
    
        /// <summary>
        /// Gets or sets detected apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detectedApps", Required = Newtonsoft.Json.Required.Default)]
        public IManagedDeviceDetectedAppsCollectionWithReferencesPage DetectedApps { get; set; }
    
        /// <summary>
        /// Gets or sets device category.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceCategory", Required = Newtonsoft.Json.Required.Default)]
        public DeviceCategory DeviceCategory { get; set; }
    
        /// <summary>
        /// Gets or sets device compliance policy states.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceCompliancePolicyStates", Required = Newtonsoft.Json.Required.Default)]
        public IManagedDeviceDeviceCompliancePolicyStatesCollectionPage DeviceCompliancePolicyStates { get; set; }
    
    }
}

