// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Windows Information Protection Policy.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class WindowsInformationProtectionPolicy : WindowsInformationProtection
    {
    
        /// <summary>
        /// Gets or sets revoke on mdm handoff disabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "revokeOnMdmHandoffDisabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? RevokeOnMdmHandoffDisabled { get; set; }
    
        /// <summary>
        /// Gets or sets mdm enrollment url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mdmEnrollmentUrl", Required = Newtonsoft.Json.Required.Default)]
        public string MdmEnrollmentUrl { get; set; }
    
        /// <summary>
        /// Gets or sets windows hello for business blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsHelloForBusinessBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsHelloForBusinessBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets pin minimum length.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "pinMinimumLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PinMinimumLength { get; set; }
    
        /// <summary>
        /// Gets or sets pin uppercase letters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "pinUppercaseLetters", Required = Newtonsoft.Json.Required.Default)]
        public WindowsInformationProtectionPinCharacterRequirements? PinUppercaseLetters { get; set; }
    
        /// <summary>
        /// Gets or sets pin lowercase letters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "pinLowercaseLetters", Required = Newtonsoft.Json.Required.Default)]
        public WindowsInformationProtectionPinCharacterRequirements? PinLowercaseLetters { get; set; }
    
        /// <summary>
        /// Gets or sets pin special characters.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "pinSpecialCharacters", Required = Newtonsoft.Json.Required.Default)]
        public WindowsInformationProtectionPinCharacterRequirements? PinSpecialCharacters { get; set; }
    
        /// <summary>
        /// Gets or sets pin expiration days.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "pinExpirationDays", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PinExpirationDays { get; set; }
    
        /// <summary>
        /// Gets or sets number of past pins remembered.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "numberOfPastPinsRemembered", Required = Newtonsoft.Json.Required.Default)]
        public Int32? NumberOfPastPinsRemembered { get; set; }
    
        /// <summary>
        /// Gets or sets password maximum attempt count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordMaximumAttemptCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordMaximumAttemptCount { get; set; }
    
        /// <summary>
        /// Gets or sets minutes of inactivity before device lock.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minutesOfInactivityBeforeDeviceLock", Required = Newtonsoft.Json.Required.Default)]
        public Int32? MinutesOfInactivityBeforeDeviceLock { get; set; }
    
    }
}

