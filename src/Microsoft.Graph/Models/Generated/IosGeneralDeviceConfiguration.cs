// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Ios General Device Configuration.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class IosGeneralDeviceConfiguration : DeviceConfiguration
    {
    
        /// <summary>
        /// Gets or sets account block modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "accountBlockModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? AccountBlockModification { get; set; }
    
        /// <summary>
        /// Gets or sets activation lock allow when supervised.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "activationLockAllowWhenSupervised", Required = Newtonsoft.Json.Required.Default)]
        public bool? ActivationLockAllowWhenSupervised { get; set; }
    
        /// <summary>
        /// Gets or sets air drop blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "airDropBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? AirDropBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets air drop force unmanaged drop target.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "airDropForceUnmanagedDropTarget", Required = Newtonsoft.Json.Required.Default)]
        public bool? AirDropForceUnmanagedDropTarget { get; set; }
    
        /// <summary>
        /// Gets or sets air play force pairing password for outgoing requests.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "airPlayForcePairingPasswordForOutgoingRequests", Required = Newtonsoft.Json.Required.Default)]
        public bool? AirPlayForcePairingPasswordForOutgoingRequests { get; set; }
    
        /// <summary>
        /// Gets or sets apple watch block pairing.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appleWatchBlockPairing", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppleWatchBlockPairing { get; set; }
    
        /// <summary>
        /// Gets or sets apple watch force wrist detection.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appleWatchForceWristDetection", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppleWatchForceWristDetection { get; set; }
    
        /// <summary>
        /// Gets or sets apple news blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appleNewsBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppleNewsBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets apps single app mode list.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appsSingleAppModeList", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AppListItem> AppsSingleAppModeList { get; set; }
    
        /// <summary>
        /// Gets or sets apps visibility list.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appsVisibilityList", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AppListItem> AppsVisibilityList { get; set; }
    
        /// <summary>
        /// Gets or sets apps visibility list type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appsVisibilityListType", Required = Newtonsoft.Json.Required.Default)]
        public AppListType? AppsVisibilityListType { get; set; }
    
        /// <summary>
        /// Gets or sets app store block automatic downloads.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appStoreBlockAutomaticDownloads", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppStoreBlockAutomaticDownloads { get; set; }
    
        /// <summary>
        /// Gets or sets app store blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appStoreBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppStoreBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets app store block in app purchases.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appStoreBlockInAppPurchases", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppStoreBlockInAppPurchases { get; set; }
    
        /// <summary>
        /// Gets or sets app store block uiapp installation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appStoreBlockUIAppInstallation", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppStoreBlockUIAppInstallation { get; set; }
    
        /// <summary>
        /// Gets or sets app store require password.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appStoreRequirePassword", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppStoreRequirePassword { get; set; }
    
        /// <summary>
        /// Gets or sets bluetooth block modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bluetoothBlockModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? BluetoothBlockModification { get; set; }
    
        /// <summary>
        /// Gets or sets camera blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cameraBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? CameraBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block data roaming.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockDataRoaming", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockDataRoaming { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block global background fetch while roaming.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockGlobalBackgroundFetchWhileRoaming", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockGlobalBackgroundFetchWhileRoaming { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block per app data modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockPerAppDataModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockPerAppDataModification { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block personal hotspot.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockPersonalHotspot", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockPersonalHotspot { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block voice roaming.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockVoiceRoaming", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockVoiceRoaming { get; set; }
    
        /// <summary>
        /// Gets or sets certificates block untrusted tls certificates.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificatesBlockUntrustedTlsCertificates", Required = Newtonsoft.Json.Required.Default)]
        public bool? CertificatesBlockUntrustedTlsCertificates { get; set; }
    
        /// <summary>
        /// Gets or sets classroom app block remote screen observation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "classroomAppBlockRemoteScreenObservation", Required = Newtonsoft.Json.Required.Default)]
        public bool? ClassroomAppBlockRemoteScreenObservation { get; set; }
    
        /// <summary>
        /// Gets or sets classroom app force unprompted screen observation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "classroomAppForceUnpromptedScreenObservation", Required = Newtonsoft.Json.Required.Default)]
        public bool? ClassroomAppForceUnpromptedScreenObservation { get; set; }
    
        /// <summary>
        /// Gets or sets compliant apps list.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "compliantAppsList", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<AppListItem> CompliantAppsList { get; set; }
    
        /// <summary>
        /// Gets or sets compliant app list type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "compliantAppListType", Required = Newtonsoft.Json.Required.Default)]
        public AppListType? CompliantAppListType { get; set; }
    
        /// <summary>
        /// Gets or sets configuration profile block changes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "configurationProfileBlockChanges", Required = Newtonsoft.Json.Required.Default)]
        public bool? ConfigurationProfileBlockChanges { get; set; }
    
        /// <summary>
        /// Gets or sets definition lookup blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "definitionLookupBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefinitionLookupBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets device block enable restrictions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceBlockEnableRestrictions", Required = Newtonsoft.Json.Required.Default)]
        public bool? DeviceBlockEnableRestrictions { get; set; }
    
        /// <summary>
        /// Gets or sets device block erase content and settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceBlockEraseContentAndSettings", Required = Newtonsoft.Json.Required.Default)]
        public bool? DeviceBlockEraseContentAndSettings { get; set; }
    
        /// <summary>
        /// Gets or sets device block name modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceBlockNameModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? DeviceBlockNameModification { get; set; }
    
        /// <summary>
        /// Gets or sets diagnostic data block submission.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "diagnosticDataBlockSubmission", Required = Newtonsoft.Json.Required.Default)]
        public bool? DiagnosticDataBlockSubmission { get; set; }
    
        /// <summary>
        /// Gets or sets diagnostic data block submission modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "diagnosticDataBlockSubmissionModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? DiagnosticDataBlockSubmissionModification { get; set; }
    
        /// <summary>
        /// Gets or sets documents block managed documents in unmanaged apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "documentsBlockManagedDocumentsInUnmanagedApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? DocumentsBlockManagedDocumentsInUnmanagedApps { get; set; }
    
        /// <summary>
        /// Gets or sets documents block unmanaged documents in managed apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "documentsBlockUnmanagedDocumentsInManagedApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? DocumentsBlockUnmanagedDocumentsInManagedApps { get; set; }
    
        /// <summary>
        /// Gets or sets email in domain suffixes.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "emailInDomainSuffixes", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EmailInDomainSuffixes { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise app block trust.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseAppBlockTrust", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseAppBlockTrust { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise app block trust modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseAppBlockTrustModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseAppBlockTrustModification { get; set; }
    
        /// <summary>
        /// Gets or sets face time blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "faceTimeBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? FaceTimeBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets find my friends blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "findMyFriendsBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? FindMyFriendsBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets gaming block game center friends.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "gamingBlockGameCenterFriends", Required = Newtonsoft.Json.Required.Default)]
        public bool? GamingBlockGameCenterFriends { get; set; }
    
        /// <summary>
        /// Gets or sets gaming block multiplayer.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "gamingBlockMultiplayer", Required = Newtonsoft.Json.Required.Default)]
        public bool? GamingBlockMultiplayer { get; set; }
    
        /// <summary>
        /// Gets or sets game center blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "gameCenterBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? GameCenterBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets host pairing blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "hostPairingBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? HostPairingBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets i books store blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iBooksStoreBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? IBooksStoreBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets i books store block erotica.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iBooksStoreBlockErotica", Required = Newtonsoft.Json.Required.Default)]
        public bool? IBooksStoreBlockErotica { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud block activity continuation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudBlockActivityContinuation", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudBlockActivityContinuation { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud block backup.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudBlockBackup", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudBlockBackup { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud block document sync.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudBlockDocumentSync", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudBlockDocumentSync { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud block managed apps sync.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudBlockManagedAppsSync", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudBlockManagedAppsSync { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud block photo library.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudBlockPhotoLibrary", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudBlockPhotoLibrary { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud block photo stream sync.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudBlockPhotoStreamSync", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudBlockPhotoStreamSync { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud block shared photo stream.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudBlockSharedPhotoStream", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudBlockSharedPhotoStream { get; set; }
    
        /// <summary>
        /// Gets or sets i cloud require encrypted backup.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iCloudRequireEncryptedBackup", Required = Newtonsoft.Json.Required.Default)]
        public bool? ICloudRequireEncryptedBackup { get; set; }
    
        /// <summary>
        /// Gets or sets i tunes block explicit content.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iTunesBlockExplicitContent", Required = Newtonsoft.Json.Required.Default)]
        public bool? ITunesBlockExplicitContent { get; set; }
    
        /// <summary>
        /// Gets or sets i tunes block music service.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iTunesBlockMusicService", Required = Newtonsoft.Json.Required.Default)]
        public bool? ITunesBlockMusicService { get; set; }
    
        /// <summary>
        /// Gets or sets i tunes block radio.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iTunesBlockRadio", Required = Newtonsoft.Json.Required.Default)]
        public bool? ITunesBlockRadio { get; set; }
    
        /// <summary>
        /// Gets or sets keyboard block auto correct.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "keyboardBlockAutoCorrect", Required = Newtonsoft.Json.Required.Default)]
        public bool? KeyboardBlockAutoCorrect { get; set; }
    
        /// <summary>
        /// Gets or sets keyboard block dictation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "keyboardBlockDictation", Required = Newtonsoft.Json.Required.Default)]
        public bool? KeyboardBlockDictation { get; set; }
    
        /// <summary>
        /// Gets or sets keyboard block predictive.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "keyboardBlockPredictive", Required = Newtonsoft.Json.Required.Default)]
        public bool? KeyboardBlockPredictive { get; set; }
    
        /// <summary>
        /// Gets or sets keyboard block shortcuts.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "keyboardBlockShortcuts", Required = Newtonsoft.Json.Required.Default)]
        public bool? KeyboardBlockShortcuts { get; set; }
    
        /// <summary>
        /// Gets or sets keyboard block spell check.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "keyboardBlockSpellCheck", Required = Newtonsoft.Json.Required.Default)]
        public bool? KeyboardBlockSpellCheck { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow assistive speak.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowAssistiveSpeak", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowAssistiveSpeak { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow assistive touch settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowAssistiveTouchSettings", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowAssistiveTouchSettings { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow auto lock.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowAutoLock", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowAutoLock { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow color inversion settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowColorInversionSettings", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowColorInversionSettings { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow ringer switch.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowRingerSwitch", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowRingerSwitch { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow screen rotation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowScreenRotation", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowScreenRotation { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow sleep button.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowSleepButton", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowSleepButton { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow touchscreen.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowTouchscreen", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowTouchscreen { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow voice over settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowVoiceOverSettings", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowVoiceOverSettings { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow volume buttons.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowVolumeButtons", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowVolumeButtons { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode allow zoom settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAllowZoomSettings", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeAllowZoomSettings { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode app store url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeAppStoreUrl", Required = Newtonsoft.Json.Required.Default)]
        public string KioskModeAppStoreUrl { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode require assistive touch.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeRequireAssistiveTouch", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeRequireAssistiveTouch { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode require color inversion.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeRequireColorInversion", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeRequireColorInversion { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode require mono audio.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeRequireMonoAudio", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeRequireMonoAudio { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode require voice over.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeRequireVoiceOver", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeRequireVoiceOver { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode require zoom.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeRequireZoom", Required = Newtonsoft.Json.Required.Default)]
        public bool? KioskModeRequireZoom { get; set; }
    
        /// <summary>
        /// Gets or sets kiosk mode managed app id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "kioskModeManagedAppId", Required = Newtonsoft.Json.Required.Default)]
        public string KioskModeManagedAppId { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen block control center.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenBlockControlCenter", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenBlockControlCenter { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen block notification view.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenBlockNotificationView", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenBlockNotificationView { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen block passbook.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenBlockPassbook", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenBlockPassbook { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen block today view.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenBlockTodayView", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenBlockTodayView { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating australia.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingAustralia", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingAustralia MediaContentRatingAustralia { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating canada.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingCanada", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingCanada MediaContentRatingCanada { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating france.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingFrance", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingFrance MediaContentRatingFrance { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating germany.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingGermany", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingGermany MediaContentRatingGermany { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating ireland.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingIreland", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingIreland MediaContentRatingIreland { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating japan.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingJapan", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingJapan MediaContentRatingJapan { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating new zealand.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingNewZealand", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingNewZealand MediaContentRatingNewZealand { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating united kingdom.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingUnitedKingdom", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingUnitedKingdom MediaContentRatingUnitedKingdom { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating united states.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingUnitedStates", Required = Newtonsoft.Json.Required.Default)]
        public MediaContentRatingUnitedStates MediaContentRatingUnitedStates { get; set; }
    
        /// <summary>
        /// Gets or sets network usage rules.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkUsageRules", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<IosNetworkUsageRule> NetworkUsageRules { get; set; }
    
        /// <summary>
        /// Gets or sets media content rating apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "mediaContentRatingApps", Required = Newtonsoft.Json.Required.Default)]
        public RatingAppsType? MediaContentRatingApps { get; set; }
    
        /// <summary>
        /// Gets or sets messages blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "messagesBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? MessagesBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets notifications block settings modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "notificationsBlockSettingsModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? NotificationsBlockSettingsModification { get; set; }
    
        /// <summary>
        /// Gets or sets passcode block fingerprint unlock.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeBlockFingerprintUnlock", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasscodeBlockFingerprintUnlock { get; set; }
    
        /// <summary>
        /// Gets or sets passcode block fingerprint modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeBlockFingerprintModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasscodeBlockFingerprintModification { get; set; }
    
        /// <summary>
        /// Gets or sets passcode block modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeBlockModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasscodeBlockModification { get; set; }
    
        /// <summary>
        /// Gets or sets passcode block simple.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeBlockSimple", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasscodeBlockSimple { get; set; }
    
        /// <summary>
        /// Gets or sets passcode expiration days.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeExpirationDays", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasscodeExpirationDays { get; set; }
    
        /// <summary>
        /// Gets or sets passcode minimum length.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeMinimumLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasscodeMinimumLength { get; set; }
    
        /// <summary>
        /// Gets or sets passcode minutes of inactivity before lock.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeMinutesOfInactivityBeforeLock", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasscodeMinutesOfInactivityBeforeLock { get; set; }
    
        /// <summary>
        /// Gets or sets passcode minutes of inactivity before screen timeout.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeMinutesOfInactivityBeforeScreenTimeout", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasscodeMinutesOfInactivityBeforeScreenTimeout { get; set; }
    
        /// <summary>
        /// Gets or sets passcode minimum character set count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeMinimumCharacterSetCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasscodeMinimumCharacterSetCount { get; set; }
    
        /// <summary>
        /// Gets or sets passcode previous passcode block count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodePreviousPasscodeBlockCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasscodePreviousPasscodeBlockCount { get; set; }
    
        /// <summary>
        /// Gets or sets passcode sign in failure count before wipe.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeSignInFailureCountBeforeWipe", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasscodeSignInFailureCountBeforeWipe { get; set; }
    
        /// <summary>
        /// Gets or sets passcode required type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeRequiredType", Required = Newtonsoft.Json.Required.Default)]
        public RequiredPasswordType? PasscodeRequiredType { get; set; }
    
        /// <summary>
        /// Gets or sets passcode required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passcodeRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasscodeRequired { get; set; }
    
        /// <summary>
        /// Gets or sets podcasts blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "podcastsBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? PodcastsBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets safari block autofill.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariBlockAutofill", Required = Newtonsoft.Json.Required.Default)]
        public bool? SafariBlockAutofill { get; set; }
    
        /// <summary>
        /// Gets or sets safari block java script.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariBlockJavaScript", Required = Newtonsoft.Json.Required.Default)]
        public bool? SafariBlockJavaScript { get; set; }
    
        /// <summary>
        /// Gets or sets safari block popups.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariBlockPopups", Required = Newtonsoft.Json.Required.Default)]
        public bool? SafariBlockPopups { get; set; }
    
        /// <summary>
        /// Gets or sets safari blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? SafariBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets safari cookie settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariCookieSettings", Required = Newtonsoft.Json.Required.Default)]
        public WebBrowserCookieSettings? SafariCookieSettings { get; set; }
    
        /// <summary>
        /// Gets or sets safari managed domains.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariManagedDomains", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SafariManagedDomains { get; set; }
    
        /// <summary>
        /// Gets or sets safari password auto fill domains.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariPasswordAutoFillDomains", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> SafariPasswordAutoFillDomains { get; set; }
    
        /// <summary>
        /// Gets or sets safari require fraud warning.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safariRequireFraudWarning", Required = Newtonsoft.Json.Required.Default)]
        public bool? SafariRequireFraudWarning { get; set; }
    
        /// <summary>
        /// Gets or sets screen capture blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "screenCaptureBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? ScreenCaptureBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets siri blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "siriBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? SiriBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets siri blocked when locked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "siriBlockedWhenLocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? SiriBlockedWhenLocked { get; set; }
    
        /// <summary>
        /// Gets or sets siri block user generated content.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "siriBlockUserGeneratedContent", Required = Newtonsoft.Json.Required.Default)]
        public bool? SiriBlockUserGeneratedContent { get; set; }
    
        /// <summary>
        /// Gets or sets siri require profanity filter.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "siriRequireProfanityFilter", Required = Newtonsoft.Json.Required.Default)]
        public bool? SiriRequireProfanityFilter { get; set; }
    
        /// <summary>
        /// Gets or sets spotlight block internet results.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "spotlightBlockInternetResults", Required = Newtonsoft.Json.Required.Default)]
        public bool? SpotlightBlockInternetResults { get; set; }
    
        /// <summary>
        /// Gets or sets voice dialing blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "voiceDialingBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? VoiceDialingBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets wallpaper block modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wallpaperBlockModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? WallpaperBlockModification { get; set; }
    
        /// <summary>
        /// Gets or sets wi fi connect only to configured networks.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wiFiConnectOnlyToConfiguredNetworks", Required = Newtonsoft.Json.Required.Default)]
        public bool? WiFiConnectOnlyToConfiguredNetworks { get; set; }
    
    }
}

