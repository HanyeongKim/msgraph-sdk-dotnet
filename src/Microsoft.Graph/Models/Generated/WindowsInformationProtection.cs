// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Windows Information Protection.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class WindowsInformationProtection : ManagedAppPolicy
    {
    
        protected internal WindowsInformationProtection()
        {
            // Don't allow initialization of abstract entity types
        }
    
        /// <summary>
        /// Gets or sets enforcement level.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enforcementLevel", Required = Newtonsoft.Json.Required.Default)]
        public WindowsInformationProtectionEnforcementLevel? EnforcementLevel { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise domain.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseDomain", Required = Newtonsoft.Json.Required.Default)]
        public string EnterpriseDomain { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise protected domain names.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseProtectedDomainNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionResourceCollection> EnterpriseProtectedDomainNames { get; set; }
    
        /// <summary>
        /// Gets or sets protection under lock config required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "protectionUnderLockConfigRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? ProtectionUnderLockConfigRequired { get; set; }
    
        /// <summary>
        /// Gets or sets data recovery certificate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dataRecoveryCertificate", Required = Newtonsoft.Json.Required.Default)]
        public WindowsInformationProtectionDataRecoveryCertificate DataRecoveryCertificate { get; set; }
    
        /// <summary>
        /// Gets or sets revoke on unenroll disabled.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "revokeOnUnenrollDisabled", Required = Newtonsoft.Json.Required.Default)]
        public bool? RevokeOnUnenrollDisabled { get; set; }
    
        /// <summary>
        /// Gets or sets rights management services template id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "rightsManagementServicesTemplateId", Required = Newtonsoft.Json.Required.Default)]
        public Guid? RightsManagementServicesTemplateId { get; set; }
    
        /// <summary>
        /// Gets or sets azure rights management services allowed.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "azureRightsManagementServicesAllowed", Required = Newtonsoft.Json.Required.Default)]
        public bool? AzureRightsManagementServicesAllowed { get; set; }
    
        /// <summary>
        /// Gets or sets icons visible.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "iconsVisible", Required = Newtonsoft.Json.Required.Default)]
        public bool? IconsVisible { get; set; }
    
        /// <summary>
        /// Gets or sets allowed apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowedApps", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionApp> AllowedApps { get; set; }
    
        /// <summary>
        /// Gets or sets exempt apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exemptApps", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionApp> ExemptApps { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise network domain names.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseNetworkDomainNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionResourceCollection> EnterpriseNetworkDomainNames { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise cloud resources.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudResources", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionCloudResourceCollection> EnterpriseCloudResources { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise ipranges.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseIPRanges", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionIPRangeCollection> EnterpriseIPRanges { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise ipranges are authoritative.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseIPRangesAreAuthoritative", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseIPRangesAreAuthoritative { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise proxy servers.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseProxyServers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionResourceCollection> EnterpriseProxyServers { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise internal proxy servers.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseInternalProxyServers", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionResourceCollection> EnterpriseInternalProxyServers { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise proxy servers are authoritative.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseProxyServersAreAuthoritative", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnterpriseProxyServersAreAuthoritative { get; set; }
    
        /// <summary>
        /// Gets or sets neutral domain resources.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "neutralDomainResources", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionResourceCollection> NeutralDomainResources { get; set; }
    
        /// <summary>
        /// Gets or sets indexing encrypted stores or items blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "indexingEncryptedStoresOrItemsBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? IndexingEncryptedStoresOrItemsBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets smb auto encrypted file extensions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "smbAutoEncryptedFileExtensions", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<WindowsInformationProtectionResourceCollection> SmbAutoEncryptedFileExtensions { get; set; }
    
        /// <summary>
        /// Gets or sets targeted security group ids.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "targetedSecurityGroupIds", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> TargetedSecurityGroupIds { get; set; }
    
        /// <summary>
        /// Gets or sets allowed app locker files.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowedAppLockerFiles", Required = Newtonsoft.Json.Required.Default)]
        public IWindowsInformationProtectionAllowedAppLockerFilesCollectionPage AllowedAppLockerFiles { get; set; }
    
        /// <summary>
        /// Gets or sets exempt app locker files.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "exemptAppLockerFiles", Required = Newtonsoft.Json.Required.Default)]
        public IWindowsInformationProtectionExemptAppLockerFilesCollectionPage ExemptAppLockerFiles { get; set; }
    
    }
}

