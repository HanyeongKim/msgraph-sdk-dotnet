// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Windows10General Configuration.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Windows10GeneralConfiguration : DeviceConfiguration
    {
    
        /// <summary>
        /// Gets or sets enterprise cloud print discovery end point.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudPrintDiscoveryEndPoint", Required = Newtonsoft.Json.Required.Default)]
        public string EnterpriseCloudPrintDiscoveryEndPoint { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise cloud print oauth authority.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudPrintOAuthAuthority", Required = Newtonsoft.Json.Required.Default)]
        public string EnterpriseCloudPrintOAuthAuthority { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise cloud print oauth client identifier.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudPrintOAuthClientIdentifier", Required = Newtonsoft.Json.Required.Default)]
        public string EnterpriseCloudPrintOAuthClientIdentifier { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise cloud print resource identifier.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudPrintResourceIdentifier", Required = Newtonsoft.Json.Required.Default)]
        public string EnterpriseCloudPrintResourceIdentifier { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise cloud print discovery max limit.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudPrintDiscoveryMaxLimit", Required = Newtonsoft.Json.Required.Default)]
        public Int32? EnterpriseCloudPrintDiscoveryMaxLimit { get; set; }
    
        /// <summary>
        /// Gets or sets enterprise cloud print mopria discovery resource identifier.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enterpriseCloudPrintMopriaDiscoveryResourceIdentifier", Required = Newtonsoft.Json.Required.Default)]
        public string EnterpriseCloudPrintMopriaDiscoveryResourceIdentifier { get; set; }
    
        /// <summary>
        /// Gets or sets personalization desktop image url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "personalizationDesktopImageUrl", Required = Newtonsoft.Json.Required.Default)]
        public string PersonalizationDesktopImageUrl { get; set; }
    
        /// <summary>
        /// Gets or sets personalization lock screen image url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "personalizationLockScreenImageUrl", Required = Newtonsoft.Json.Required.Default)]
        public string PersonalizationLockScreenImageUrl { get; set; }
    
        /// <summary>
        /// Gets or sets bluetooth allowed services.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bluetoothAllowedServices", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> BluetoothAllowedServices { get; set; }
    
        /// <summary>
        /// Gets or sets bluetooth block advertising.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bluetoothBlockAdvertising", Required = Newtonsoft.Json.Required.Default)]
        public bool? BluetoothBlockAdvertising { get; set; }
    
        /// <summary>
        /// Gets or sets bluetooth block discoverable mode.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bluetoothBlockDiscoverableMode", Required = Newtonsoft.Json.Required.Default)]
        public bool? BluetoothBlockDiscoverableMode { get; set; }
    
        /// <summary>
        /// Gets or sets bluetooth block pre pairing.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bluetoothBlockPrePairing", Required = Newtonsoft.Json.Required.Default)]
        public bool? BluetoothBlockPrePairing { get; set; }
    
        /// <summary>
        /// Gets or sets bluetooth device name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bluetoothDeviceName", Required = Newtonsoft.Json.Required.Default)]
        public string BluetoothDeviceName { get; set; }
    
        /// <summary>
        /// Gets or sets edge block autofill.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockAutofill", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockAutofill { get; set; }
    
        /// <summary>
        /// Gets or sets edge blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets edge cookie policy.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeCookiePolicy", Required = Newtonsoft.Json.Required.Default)]
        public EdgeCookiePolicy? EdgeCookiePolicy { get; set; }
    
        /// <summary>
        /// Gets or sets edge block developer tools.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockDeveloperTools", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockDeveloperTools { get; set; }
    
        /// <summary>
        /// Gets or sets edge block sending do not track header.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockSendingDoNotTrackHeader", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockSendingDoNotTrackHeader { get; set; }
    
        /// <summary>
        /// Gets or sets edge block extensions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockExtensions", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockExtensions { get; set; }
    
        /// <summary>
        /// Gets or sets edge block in private browsing.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockInPrivateBrowsing", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockInPrivateBrowsing { get; set; }
    
        /// <summary>
        /// Gets or sets edge block java script.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockJavaScript", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockJavaScript { get; set; }
    
        /// <summary>
        /// Gets or sets edge block password manager.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockPasswordManager", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockPasswordManager { get; set; }
    
        /// <summary>
        /// Gets or sets edge block address bar dropdown.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockAddressBarDropdown", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockAddressBarDropdown { get; set; }
    
        /// <summary>
        /// Gets or sets edge block compatibility list.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockCompatibilityList", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockCompatibilityList { get; set; }
    
        /// <summary>
        /// Gets or sets edge clear browsing data on exit.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeClearBrowsingDataOnExit", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeClearBrowsingDataOnExit { get; set; }
    
        /// <summary>
        /// Gets or sets edge allow start pages modification.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeAllowStartPagesModification", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeAllowStartPagesModification { get; set; }
    
        /// <summary>
        /// Gets or sets edge disable first run page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeDisableFirstRunPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeDisableFirstRunPage { get; set; }
    
        /// <summary>
        /// Gets or sets edge block live tile data collection.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockLiveTileDataCollection", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockLiveTileDataCollection { get; set; }
    
        /// <summary>
        /// Gets or sets edge sync favorites with internet explorer.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeSyncFavoritesWithInternetExplorer", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeSyncFavoritesWithInternetExplorer { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block data when roaming.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockDataWhenRoaming", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockDataWhenRoaming { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block vpn.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockVpn", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockVpn { get; set; }
    
        /// <summary>
        /// Gets or sets cellular block vpn when roaming.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularBlockVpnWhenRoaming", Required = Newtonsoft.Json.Required.Default)]
        public bool? CellularBlockVpnWhenRoaming { get; set; }
    
        /// <summary>
        /// Gets or sets cellular data.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cellularData", Required = Newtonsoft.Json.Required.Default)]
        public ConfigurationUsage? CellularData { get; set; }
    
        /// <summary>
        /// Gets or sets defender block end user access.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderBlockEndUserAccess", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderBlockEndUserAccess { get; set; }
    
        /// <summary>
        /// Gets or sets defender days before deleting quarantined malware.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderDaysBeforeDeletingQuarantinedMalware", Required = Newtonsoft.Json.Required.Default)]
        public Int32? DefenderDaysBeforeDeletingQuarantinedMalware { get; set; }
    
        /// <summary>
        /// Gets or sets defender detected malware actions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderDetectedMalwareActions", Required = Newtonsoft.Json.Required.Default)]
        public DefenderDetectedMalwareActions DefenderDetectedMalwareActions { get; set; }
    
        /// <summary>
        /// Gets or sets defender system scan schedule.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderSystemScanSchedule", Required = Newtonsoft.Json.Required.Default)]
        public WeeklySchedule? DefenderSystemScanSchedule { get; set; }
    
        /// <summary>
        /// Gets or sets defender files and folders to exclude.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderFilesAndFoldersToExclude", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> DefenderFilesAndFoldersToExclude { get; set; }
    
        /// <summary>
        /// Gets or sets defender file extensions to exclude.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderFileExtensionsToExclude", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> DefenderFileExtensionsToExclude { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan max cpu.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanMaxCpu", Required = Newtonsoft.Json.Required.Default)]
        public Int32? DefenderScanMaxCpu { get; set; }
    
        /// <summary>
        /// Gets or sets defender monitor file activity.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderMonitorFileActivity", Required = Newtonsoft.Json.Required.Default)]
        public DefenderMonitorFileActivity? DefenderMonitorFileActivity { get; set; }
    
        /// <summary>
        /// Gets or sets defender potentially unwanted app action.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderPotentiallyUnwantedAppAction", Required = Newtonsoft.Json.Required.Default)]
        public DefenderPotentiallyUnwantedAppAction? DefenderPotentiallyUnwantedAppAction { get; set; }
    
        /// <summary>
        /// Gets or sets defender processes to exclude.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderProcessesToExclude", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> DefenderProcessesToExclude { get; set; }
    
        /// <summary>
        /// Gets or sets defender prompt for sample submission.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderPromptForSampleSubmission", Required = Newtonsoft.Json.Required.Default)]
        public DefenderPromptForSampleSubmission? DefenderPromptForSampleSubmission { get; set; }
    
        /// <summary>
        /// Gets or sets defender require behavior monitoring.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderRequireBehaviorMonitoring", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderRequireBehaviorMonitoring { get; set; }
    
        /// <summary>
        /// Gets or sets defender require cloud protection.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderRequireCloudProtection", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderRequireCloudProtection { get; set; }
    
        /// <summary>
        /// Gets or sets defender require network inspection system.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderRequireNetworkInspectionSystem", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderRequireNetworkInspectionSystem { get; set; }
    
        /// <summary>
        /// Gets or sets defender require real time monitoring.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderRequireRealTimeMonitoring", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderRequireRealTimeMonitoring { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan archive files.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanArchiveFiles", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderScanArchiveFiles { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan downloads.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanDownloads", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderScanDownloads { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan network files.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanNetworkFiles", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderScanNetworkFiles { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan incoming mail.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanIncomingMail", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderScanIncomingMail { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan mapped network drives during full scan.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanMappedNetworkDrivesDuringFullScan", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderScanMappedNetworkDrivesDuringFullScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan removable drives during full scan.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanRemovableDrivesDuringFullScan", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderScanRemovableDrivesDuringFullScan { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan scripts loaded in internet explorer.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanScriptsLoadedInInternetExplorer", Required = Newtonsoft.Json.Required.Default)]
        public bool? DefenderScanScriptsLoadedInInternetExplorer { get; set; }
    
        /// <summary>
        /// Gets or sets defender signature update interval in hours.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderSignatureUpdateIntervalInHours", Required = Newtonsoft.Json.Required.Default)]
        public Int32? DefenderSignatureUpdateIntervalInHours { get; set; }
    
        /// <summary>
        /// Gets or sets defender scan type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScanType", Required = Newtonsoft.Json.Required.Default)]
        public DefenderScanType? DefenderScanType { get; set; }
    
        /// <summary>
        /// Gets or sets defender scheduled scan time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScheduledScanTime", Required = Newtonsoft.Json.Required.Default)]
        public TimeOfDay DefenderScheduledScanTime { get; set; }
    
        /// <summary>
        /// Gets or sets defender scheduled quick scan time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "defenderScheduledQuickScanTime", Required = Newtonsoft.Json.Required.Default)]
        public TimeOfDay DefenderScheduledQuickScanTime { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen allow timeout configuration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenAllowTimeoutConfiguration", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenAllowTimeoutConfiguration { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen block action center notifications.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenBlockActionCenterNotifications", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenBlockActionCenterNotifications { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen block cortana.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenBlockCortana", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenBlockCortana { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen block toast notifications.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenBlockToastNotifications", Required = Newtonsoft.Json.Required.Default)]
        public bool? LockScreenBlockToastNotifications { get; set; }
    
        /// <summary>
        /// Gets or sets lock screen timeout in seconds.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lockScreenTimeoutInSeconds", Required = Newtonsoft.Json.Required.Default)]
        public Int32? LockScreenTimeoutInSeconds { get; set; }
    
        /// <summary>
        /// Gets or sets password block simple.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordBlockSimple", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasswordBlockSimple { get; set; }
    
        /// <summary>
        /// Gets or sets password expiration days.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordExpirationDays", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordExpirationDays { get; set; }
    
        /// <summary>
        /// Gets or sets password minimum length.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordMinimumLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordMinimumLength { get; set; }
    
        /// <summary>
        /// Gets or sets password minutes of inactivity before screen timeout.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordMinutesOfInactivityBeforeScreenTimeout", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordMinutesOfInactivityBeforeScreenTimeout { get; set; }
    
        /// <summary>
        /// Gets or sets password minimum character set count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordMinimumCharacterSetCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordMinimumCharacterSetCount { get; set; }
    
        /// <summary>
        /// Gets or sets password previous password block count.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordPreviousPasswordBlockCount", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordPreviousPasswordBlockCount { get; set; }
    
        /// <summary>
        /// Gets or sets password required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasswordRequired { get; set; }
    
        /// <summary>
        /// Gets or sets password require when resume from idle state.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordRequireWhenResumeFromIdleState", Required = Newtonsoft.Json.Required.Default)]
        public bool? PasswordRequireWhenResumeFromIdleState { get; set; }
    
        /// <summary>
        /// Gets or sets password required type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordRequiredType", Required = Newtonsoft.Json.Required.Default)]
        public RequiredPasswordType? PasswordRequiredType { get; set; }
    
        /// <summary>
        /// Gets or sets password sign in failure count before factory reset.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passwordSignInFailureCountBeforeFactoryReset", Required = Newtonsoft.Json.Required.Default)]
        public Int32? PasswordSignInFailureCountBeforeFactoryReset { get; set; }
    
        /// <summary>
        /// Gets or sets privacy auto accept pairing and consent prompts.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "privacyAutoAcceptPairingAndConsentPrompts", Required = Newtonsoft.Json.Required.Default)]
        public bool? PrivacyAutoAcceptPairingAndConsentPrompts { get; set; }
    
        /// <summary>
        /// Gets or sets privacy block input personalization.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "privacyBlockInputPersonalization", Required = Newtonsoft.Json.Required.Default)]
        public bool? PrivacyBlockInputPersonalization { get; set; }
    
        /// <summary>
        /// Gets or sets start block unpinning apps from taskbar.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startBlockUnpinningAppsFromTaskbar", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartBlockUnpinningAppsFromTaskbar { get; set; }
    
        /// <summary>
        /// Gets or sets start menu app list visibility.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuAppListVisibility", Required = Newtonsoft.Json.Required.Default)]
        public WindowsStartMenuAppListVisibilityType? StartMenuAppListVisibility { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide change account settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideChangeAccountSettings", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideChangeAccountSettings { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide frequently used apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideFrequentlyUsedApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideFrequentlyUsedApps { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide hibernate.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideHibernate", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideHibernate { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide lock.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideLock", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideLock { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide power button.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHidePowerButton", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHidePowerButton { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide recent jump lists.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideRecentJumpLists", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideRecentJumpLists { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide recently added apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideRecentlyAddedApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideRecentlyAddedApps { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide restart options.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideRestartOptions", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideRestartOptions { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide shut down.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideShutDown", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideShutDown { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide sign out.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideSignOut", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideSignOut { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide sleep.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideSleep", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideSleep { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide switch account.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideSwitchAccount", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideSwitchAccount { get; set; }
    
        /// <summary>
        /// Gets or sets start menu hide user tile.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuHideUserTile", Required = Newtonsoft.Json.Required.Default)]
        public bool? StartMenuHideUserTile { get; set; }
    
        /// <summary>
        /// Gets or sets start menu layout edge assets xml.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuLayoutEdgeAssetsXml", Required = Newtonsoft.Json.Required.Default)]
        public byte[] StartMenuLayoutEdgeAssetsXml { get; set; }
    
        /// <summary>
        /// Gets or sets start menu layout xml.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuLayoutXml", Required = Newtonsoft.Json.Required.Default)]
        public byte[] StartMenuLayoutXml { get; set; }
    
        /// <summary>
        /// Gets or sets start menu mode.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuMode", Required = Newtonsoft.Json.Required.Default)]
        public WindowsStartMenuModeType? StartMenuMode { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder documents.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderDocuments", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderDocuments { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder downloads.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderDownloads", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderDownloads { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder file explorer.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderFileExplorer", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderFileExplorer { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder home group.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderHomeGroup", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderHomeGroup { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder music.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderMusic", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderMusic { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder network.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderNetwork", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderNetwork { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder personal folder.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderPersonalFolder", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderPersonalFolder { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder pictures.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderPictures", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderPictures { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder settings.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderSettings", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderSettings { get; set; }
    
        /// <summary>
        /// Gets or sets start menu pinned folder videos.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "startMenuPinnedFolderVideos", Required = Newtonsoft.Json.Required.Default)]
        public VisibilitySetting? StartMenuPinnedFolderVideos { get; set; }
    
        /// <summary>
        /// Gets or sets settings block settings app.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockSettingsApp", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockSettingsApp { get; set; }
    
        /// <summary>
        /// Gets or sets settings block system page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockSystemPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockSystemPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block devices page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockDevicesPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockDevicesPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block network internet page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockNetworkInternetPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockNetworkInternetPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block personalization page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockPersonalizationPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockPersonalizationPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block accounts page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockAccountsPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockAccountsPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block time language page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockTimeLanguagePage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockTimeLanguagePage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block ease of access page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockEaseOfAccessPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockEaseOfAccessPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block privacy page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockPrivacyPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockPrivacyPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block update security page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockUpdateSecurityPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockUpdateSecurityPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block apps page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockAppsPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockAppsPage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block gaming page.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockGamingPage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockGamingPage { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight block consumer specific features.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightBlockConsumerSpecificFeatures", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsSpotlightBlockConsumerSpecificFeatures { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsSpotlightBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight block on action center.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightBlockOnActionCenter", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsSpotlightBlockOnActionCenter { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight block tailored experiences.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightBlockTailoredExperiences", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsSpotlightBlockTailoredExperiences { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight block third party notifications.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightBlockThirdPartyNotifications", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsSpotlightBlockThirdPartyNotifications { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight block welcome experience.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightBlockWelcomeExperience", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsSpotlightBlockWelcomeExperience { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight block windows tips.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightBlockWindowsTips", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsSpotlightBlockWindowsTips { get; set; }
    
        /// <summary>
        /// Gets or sets windows spotlight configure on lock screen.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsSpotlightConfigureOnLockScreen", Required = Newtonsoft.Json.Required.Default)]
        public WindowsSpotlightEnablementSettings? WindowsSpotlightConfigureOnLockScreen { get; set; }
    
        /// <summary>
        /// Gets or sets network proxy apply settings device wide.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkProxyApplySettingsDeviceWide", Required = Newtonsoft.Json.Required.Default)]
        public bool? NetworkProxyApplySettingsDeviceWide { get; set; }
    
        /// <summary>
        /// Gets or sets network proxy disable auto detect.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkProxyDisableAutoDetect", Required = Newtonsoft.Json.Required.Default)]
        public bool? NetworkProxyDisableAutoDetect { get; set; }
    
        /// <summary>
        /// Gets or sets network proxy automatic configuration url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkProxyAutomaticConfigurationUrl", Required = Newtonsoft.Json.Required.Default)]
        public string NetworkProxyAutomaticConfigurationUrl { get; set; }
    
        /// <summary>
        /// Gets or sets network proxy server.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkProxyServer", Required = Newtonsoft.Json.Required.Default)]
        public Windows10NetworkProxyServer NetworkProxyServer { get; set; }
    
        /// <summary>
        /// Gets or sets accounts block adding non microsoft account email.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "accountsBlockAddingNonMicrosoftAccountEmail", Required = Newtonsoft.Json.Required.Default)]
        public bool? AccountsBlockAddingNonMicrosoftAccountEmail { get; set; }
    
        /// <summary>
        /// Gets or sets anti theft mode blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "antiTheftModeBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? AntiTheftModeBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets bluetooth blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "bluetoothBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? BluetoothBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets camera blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cameraBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? CameraBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets connected devices service blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "connectedDevicesServiceBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? ConnectedDevicesServiceBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets certificates block manual root certificate installation.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificatesBlockManualRootCertificateInstallation", Required = Newtonsoft.Json.Required.Default)]
        public bool? CertificatesBlockManualRootCertificateInstallation { get; set; }
    
        /// <summary>
        /// Gets or sets copy paste blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "copyPasteBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? CopyPasteBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets cortana blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "cortanaBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? CortanaBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets device management block factory reset on mobile.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceManagementBlockFactoryResetOnMobile", Required = Newtonsoft.Json.Required.Default)]
        public bool? DeviceManagementBlockFactoryResetOnMobile { get; set; }
    
        /// <summary>
        /// Gets or sets device management block manual unenroll.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceManagementBlockManualUnenroll", Required = Newtonsoft.Json.Required.Default)]
        public bool? DeviceManagementBlockManualUnenroll { get; set; }
    
        /// <summary>
        /// Gets or sets diagnostics data submission mode.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "diagnosticsDataSubmissionMode", Required = Newtonsoft.Json.Required.Default)]
        public DiagnosticDataSubmissionMode? DiagnosticsDataSubmissionMode { get; set; }
    
        /// <summary>
        /// Gets or sets one drive disable file sync.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "oneDriveDisableFileSync", Required = Newtonsoft.Json.Required.Default)]
        public bool? OneDriveDisableFileSync { get; set; }
    
        /// <summary>
        /// Gets or sets safe search filter.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "safeSearchFilter", Required = Newtonsoft.Json.Required.Default)]
        public SafeSearchFilterType? SafeSearchFilter { get; set; }
    
        /// <summary>
        /// Gets or sets edge block popups.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockPopups", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockPopups { get; set; }
    
        /// <summary>
        /// Gets or sets edge block search suggestions.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockSearchSuggestions", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockSearchSuggestions { get; set; }
    
        /// <summary>
        /// Gets or sets edge block sending intranet traffic to internet explorer.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockSendingIntranetTrafficToInternetExplorer", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockSendingIntranetTrafficToInternetExplorer { get; set; }
    
        /// <summary>
        /// Gets or sets edge require smart screen.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeRequireSmartScreen", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeRequireSmartScreen { get; set; }
    
        /// <summary>
        /// Gets or sets edge enterprise mode site list location.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeEnterpriseModeSiteListLocation", Required = Newtonsoft.Json.Required.Default)]
        public string EdgeEnterpriseModeSiteListLocation { get; set; }
    
        /// <summary>
        /// Gets or sets edge first run url.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeFirstRunUrl", Required = Newtonsoft.Json.Required.Default)]
        public string EdgeFirstRunUrl { get; set; }
    
        /// <summary>
        /// Gets or sets edge search engine.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeSearchEngine", Required = Newtonsoft.Json.Required.Default)]
        public EdgeSearchEngineBase EdgeSearchEngine { get; set; }
    
        /// <summary>
        /// Gets or sets edge homepage urls.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeHomepageUrls", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> EdgeHomepageUrls { get; set; }
    
        /// <summary>
        /// Gets or sets edge block access to about flags.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "edgeBlockAccessToAboutFlags", Required = Newtonsoft.Json.Required.Default)]
        public bool? EdgeBlockAccessToAboutFlags { get; set; }
    
        /// <summary>
        /// Gets or sets smart screen block prompt override.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "smartScreenBlockPromptOverride", Required = Newtonsoft.Json.Required.Default)]
        public bool? SmartScreenBlockPromptOverride { get; set; }
    
        /// <summary>
        /// Gets or sets smart screen block prompt override for files.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "smartScreenBlockPromptOverrideForFiles", Required = Newtonsoft.Json.Required.Default)]
        public bool? SmartScreenBlockPromptOverrideForFiles { get; set; }
    
        /// <summary>
        /// Gets or sets web rtc block localhost ip address.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "webRtcBlockLocalhostIpAddress", Required = Newtonsoft.Json.Required.Default)]
        public bool? WebRtcBlockLocalhostIpAddress { get; set; }
    
        /// <summary>
        /// Gets or sets internet sharing blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "internetSharingBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? InternetSharingBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets settings block add provisioning package.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockAddProvisioningPackage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockAddProvisioningPackage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block remove provisioning package.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockRemoveProvisioningPackage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockRemoveProvisioningPackage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block change system time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockChangeSystemTime", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockChangeSystemTime { get; set; }
    
        /// <summary>
        /// Gets or sets settings block edit device name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockEditDeviceName", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockEditDeviceName { get; set; }
    
        /// <summary>
        /// Gets or sets settings block change region.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockChangeRegion", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockChangeRegion { get; set; }
    
        /// <summary>
        /// Gets or sets settings block change language.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockChangeLanguage", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockChangeLanguage { get; set; }
    
        /// <summary>
        /// Gets or sets settings block change power sleep.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "settingsBlockChangePowerSleep", Required = Newtonsoft.Json.Required.Default)]
        public bool? SettingsBlockChangePowerSleep { get; set; }
    
        /// <summary>
        /// Gets or sets location services blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "locationServicesBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? LocationServicesBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets microsoft account blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "microsoftAccountBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? MicrosoftAccountBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets microsoft account block settings sync.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "microsoftAccountBlockSettingsSync", Required = Newtonsoft.Json.Required.Default)]
        public bool? MicrosoftAccountBlockSettingsSync { get; set; }
    
        /// <summary>
        /// Gets or sets nfc blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "nfcBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? NfcBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets reset protection mode blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "resetProtectionModeBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? ResetProtectionModeBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets screen capture blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "screenCaptureBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? ScreenCaptureBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets storage block removable storage.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "storageBlockRemovableStorage", Required = Newtonsoft.Json.Required.Default)]
        public bool? StorageBlockRemovableStorage { get; set; }
    
        /// <summary>
        /// Gets or sets storage require mobile device encryption.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "storageRequireMobileDeviceEncryption", Required = Newtonsoft.Json.Required.Default)]
        public bool? StorageRequireMobileDeviceEncryption { get; set; }
    
        /// <summary>
        /// Gets or sets usb blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "usbBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? UsbBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets voice recording blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "voiceRecordingBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? VoiceRecordingBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets wi fi block automatic connect hotspots.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wiFiBlockAutomaticConnectHotspots", Required = Newtonsoft.Json.Required.Default)]
        public bool? WiFiBlockAutomaticConnectHotspots { get; set; }
    
        /// <summary>
        /// Gets or sets wi fi blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wiFiBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? WiFiBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets wi fi block manual configuration.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wiFiBlockManualConfiguration", Required = Newtonsoft.Json.Required.Default)]
        public bool? WiFiBlockManualConfiguration { get; set; }
    
        /// <summary>
        /// Gets or sets wi fi scan interval.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wiFiScanInterval", Required = Newtonsoft.Json.Required.Default)]
        public Int32? WiFiScanInterval { get; set; }
    
        /// <summary>
        /// Gets or sets wireless display block projection to this device.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wirelessDisplayBlockProjectionToThisDevice", Required = Newtonsoft.Json.Required.Default)]
        public bool? WirelessDisplayBlockProjectionToThisDevice { get; set; }
    
        /// <summary>
        /// Gets or sets wireless display block user input from receiver.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wirelessDisplayBlockUserInputFromReceiver", Required = Newtonsoft.Json.Required.Default)]
        public bool? WirelessDisplayBlockUserInputFromReceiver { get; set; }
    
        /// <summary>
        /// Gets or sets wireless display require pin for pairing.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "wirelessDisplayRequirePinForPairing", Required = Newtonsoft.Json.Required.Default)]
        public bool? WirelessDisplayRequirePinForPairing { get; set; }
    
        /// <summary>
        /// Gets or sets windows store blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsStoreBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsStoreBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets apps allow trusted apps sideloading.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appsAllowTrustedAppsSideloading", Required = Newtonsoft.Json.Required.Default)]
        public StateManagementSetting? AppsAllowTrustedAppsSideloading { get; set; }
    
        /// <summary>
        /// Gets or sets windows store block auto update.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsStoreBlockAutoUpdate", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsStoreBlockAutoUpdate { get; set; }
    
        /// <summary>
        /// Gets or sets developer unlock setting.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "developerUnlockSetting", Required = Newtonsoft.Json.Required.Default)]
        public StateManagementSetting? DeveloperUnlockSetting { get; set; }
    
        /// <summary>
        /// Gets or sets shared user app data allowed.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "sharedUserAppDataAllowed", Required = Newtonsoft.Json.Required.Default)]
        public bool? SharedUserAppDataAllowed { get; set; }
    
        /// <summary>
        /// Gets or sets apps block windows store originated apps.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "appsBlockWindowsStoreOriginatedApps", Required = Newtonsoft.Json.Required.Default)]
        public bool? AppsBlockWindowsStoreOriginatedApps { get; set; }
    
        /// <summary>
        /// Gets or sets windows store enable private store only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "windowsStoreEnablePrivateStoreOnly", Required = Newtonsoft.Json.Required.Default)]
        public bool? WindowsStoreEnablePrivateStoreOnly { get; set; }
    
        /// <summary>
        /// Gets or sets storage restrict app data to system volume.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "storageRestrictAppDataToSystemVolume", Required = Newtonsoft.Json.Required.Default)]
        public bool? StorageRestrictAppDataToSystemVolume { get; set; }
    
        /// <summary>
        /// Gets or sets storage restrict app install to system volume.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "storageRestrictAppInstallToSystemVolume", Required = Newtonsoft.Json.Required.Default)]
        public bool? StorageRestrictAppInstallToSystemVolume { get; set; }
    
        /// <summary>
        /// Gets or sets game dvr blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "gameDvrBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? GameDvrBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets experience block device discovery.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "experienceBlockDeviceDiscovery", Required = Newtonsoft.Json.Required.Default)]
        public bool? ExperienceBlockDeviceDiscovery { get; set; }
    
        /// <summary>
        /// Gets or sets experience block error dialog when no sim.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "experienceBlockErrorDialogWhenNoSIM", Required = Newtonsoft.Json.Required.Default)]
        public bool? ExperienceBlockErrorDialogWhenNoSIM { get; set; }
    
        /// <summary>
        /// Gets or sets experience block task switcher.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "experienceBlockTaskSwitcher", Required = Newtonsoft.Json.Required.Default)]
        public bool? ExperienceBlockTaskSwitcher { get; set; }
    
        /// <summary>
        /// Gets or sets logon block fast user switching.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "logonBlockFastUserSwitching", Required = Newtonsoft.Json.Required.Default)]
        public bool? LogonBlockFastUserSwitching { get; set; }
    
    }
}

