// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Managed App Protection.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class ManagedAppProtection : ManagedAppPolicy
    {
    
        protected internal ManagedAppProtection()
        {
            // Don't allow initialization of abstract entity types
        }
    
        /// <summary>
        /// Gets or sets period offline before access check.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "periodOfflineBeforeAccessCheck", Required = Newtonsoft.Json.Required.Default)]
        public Duration PeriodOfflineBeforeAccessCheck { get; set; }
    
        /// <summary>
        /// Gets or sets period online before access check.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "periodOnlineBeforeAccessCheck", Required = Newtonsoft.Json.Required.Default)]
        public Duration PeriodOnlineBeforeAccessCheck { get; set; }
    
        /// <summary>
        /// Gets or sets allowed inbound data transfer sources.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowedInboundDataTransferSources", Required = Newtonsoft.Json.Required.Default)]
        public ManagedAppDataTransferLevel? AllowedInboundDataTransferSources { get; set; }
    
        /// <summary>
        /// Gets or sets allowed outbound data transfer destinations.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowedOutboundDataTransferDestinations", Required = Newtonsoft.Json.Required.Default)]
        public ManagedAppDataTransferLevel? AllowedOutboundDataTransferDestinations { get; set; }
    
        /// <summary>
        /// Gets or sets organizational credentials required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "organizationalCredentialsRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? OrganizationalCredentialsRequired { get; set; }
    
        /// <summary>
        /// Gets or sets allowed outbound clipboard sharing level.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowedOutboundClipboardSharingLevel", Required = Newtonsoft.Json.Required.Default)]
        public ManagedAppClipboardSharingLevel? AllowedOutboundClipboardSharingLevel { get; set; }
    
        /// <summary>
        /// Gets or sets data backup blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dataBackupBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? DataBackupBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets device compliance required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "deviceComplianceRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? DeviceComplianceRequired { get; set; }
    
        /// <summary>
        /// Gets or sets managed browser to open links required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "managedBrowserToOpenLinksRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? ManagedBrowserToOpenLinksRequired { get; set; }
    
        /// <summary>
        /// Gets or sets save as blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "saveAsBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? SaveAsBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets period offline before wipe is enforced.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "periodOfflineBeforeWipeIsEnforced", Required = Newtonsoft.Json.Required.Default)]
        public Duration PeriodOfflineBeforeWipeIsEnforced { get; set; }
    
        /// <summary>
        /// Gets or sets pin required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "pinRequired", Required = Newtonsoft.Json.Required.Default)]
        public bool? PinRequired { get; set; }
    
        /// <summary>
        /// Gets or sets maximum pin retries.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "maximumPinRetries", Required = Newtonsoft.Json.Required.Default)]
        public Int32? MaximumPinRetries { get; set; }
    
        /// <summary>
        /// Gets or sets simple pin blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "simplePinBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? SimplePinBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets minimum pin length.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minimumPinLength", Required = Newtonsoft.Json.Required.Default)]
        public Int32? MinimumPinLength { get; set; }
    
        /// <summary>
        /// Gets or sets pin character set.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "pinCharacterSet", Required = Newtonsoft.Json.Required.Default)]
        public ManagedAppPinCharacterSet? PinCharacterSet { get; set; }
    
        /// <summary>
        /// Gets or sets allowed data storage locations.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "allowedDataStorageLocations", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<ManagedAppDataStorageLocation> AllowedDataStorageLocations { get; set; }
    
        /// <summary>
        /// Gets or sets contact sync blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "contactSyncBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? ContactSyncBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets print blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "printBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? PrintBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets fingerprint blocked.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "fingerprintBlocked", Required = Newtonsoft.Json.Required.Default)]
        public bool? FingerprintBlocked { get; set; }
    
        /// <summary>
        /// Gets or sets disable app pin if device pin is set.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "disableAppPinIfDevicePinIsSet", Required = Newtonsoft.Json.Required.Default)]
        public bool? DisableAppPinIfDevicePinIsSet { get; set; }
    
        /// <summary>
        /// Gets or sets minimum required os version.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minimumRequiredOsVersion", Required = Newtonsoft.Json.Required.Default)]
        public string MinimumRequiredOsVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum warning os version.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minimumWarningOsVersion", Required = Newtonsoft.Json.Required.Default)]
        public string MinimumWarningOsVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum required app version.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minimumRequiredAppVersion", Required = Newtonsoft.Json.Required.Default)]
        public string MinimumRequiredAppVersion { get; set; }
    
        /// <summary>
        /// Gets or sets minimum warning app version.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "minimumWarningAppVersion", Required = Newtonsoft.Json.Required.Default)]
        public string MinimumWarningAppVersion { get; set; }
    
    }
}

