// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Column Definition.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class ColumnDefinition : Entity
    {
    
        /// <summary>
        /// Gets or sets boolean.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "boolean", Required = Newtonsoft.Json.Required.Default)]
        public BooleanColumn Boolean { get; set; }
    
        /// <summary>
        /// Gets or sets calculated.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "calculated", Required = Newtonsoft.Json.Required.Default)]
        public CalculatedColumn Calculated { get; set; }
    
        /// <summary>
        /// Gets or sets choice.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "choice", Required = Newtonsoft.Json.Required.Default)]
        public ChoiceColumn Choice { get; set; }
    
        /// <summary>
        /// Gets or sets date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "dateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeColumn DateTime { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "description", Required = Newtonsoft.Json.Required.Default)]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets enforce unique values.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "enforceUniqueValues", Required = Newtonsoft.Json.Required.Default)]
        public bool? EnforceUniqueValues { get; set; }
    
        /// <summary>
        /// Gets or sets hidden.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "hidden", Required = Newtonsoft.Json.Required.Default)]
        public bool? Hidden { get; set; }
    
        /// <summary>
        /// Gets or sets indexed.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "indexed", Required = Newtonsoft.Json.Required.Default)]
        public bool? Indexed { get; set; }
    
        /// <summary>
        /// Gets or sets lookup.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lookup", Required = Newtonsoft.Json.Required.Default)]
        public LookupColumn Lookup { get; set; }
    
        /// <summary>
        /// Gets or sets name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "name", Required = Newtonsoft.Json.Required.Default)]
        public string Name { get; set; }
    
        /// <summary>
        /// Gets or sets number.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "number", Required = Newtonsoft.Json.Required.Default)]
        public NumberColumn Number { get; set; }
    
        /// <summary>
        /// Gets or sets person or group.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "personOrGroup", Required = Newtonsoft.Json.Required.Default)]
        public PersonOrGroupColumn PersonOrGroup { get; set; }
    
        /// <summary>
        /// Gets or sets read only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "readOnly", Required = Newtonsoft.Json.Required.Default)]
        public bool? ReadOnly { get; set; }
    
        /// <summary>
        /// Gets or sets required.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "required", Required = Newtonsoft.Json.Required.Default)]
        public bool? Required { get; set; }
    
        /// <summary>
        /// Gets or sets text.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "text", Required = Newtonsoft.Json.Required.Default)]
        public TextColumn Text { get; set; }
    
    }
}

